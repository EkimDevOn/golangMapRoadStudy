Ambiente de Desenvolvimento – 1. O terminal

Terminologia:
GUI: Graphical User Interface
CLI: Command Line Interface
Terminal, console, etc
Unix, Linux, Mac:
Shell, bash
Windows:
        Command prompt, cmd, dos prompt, powershell
Shell/bash commands:
pwd
ls
ls -la
Permissions: owner, group, world
r, w, x → 4, 2, 1 (d = directory)
rwxrwxrwx = owner, group, world
touch
clear
chmod
chmod options permissions filename
chmod 777 arquivo.ext
cd 
cd ../
cd qualquer/pasta/
env
rm [arquivo]
rm -rf [arquivo]
.bash_profile & .bashrc
.bash_profile is executed for login shells, while .bashrc is executed for interactive non-login shells. 
When you login (type username and password) via console, either sitting at the machine, or remotely via ssh: .bash_profile is executed to configure your shell before the initial command prompt.
nano [arquivo]
cat [arquivo]
grep
cat temp2.txt | grep enter

ls | grep -i document

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

Ambiente de Desenvolvimento – 2. Go Workspace

$GOPATH/  // PASTA ONDE INSTALOU O GO DENTRO DELE VAI TER 3X DIRETÓRIOS 
    bin/  // BIN  E DE BINÁRIO ARQUIVOS EXECUTAVEIS QUE GERAR COM GO FICARAMA AQUI
    pkg/  // LIBERIES, PRE-COMPILADORES ( NÃO VAMOS USAR MUITO NESTE CURSO PORÉM DEVE SER ESTUDADO OUTRORA)
    src/  // É ONDE O CÓDIGO FICA SALVO
        github.com/
            [Nome do usuário (github.com)]/
                [Nome do projeto ou repo]/
                [Nome do projeto ou repo]/
                [Nome do projeto ou repo]/
                [Nome do projeto ou repo]/
                ...
                [Nome do projeto ou repo]/
GOROOT: onde os binários da instalação do Go foram instalados
GOROOT="/usr/lib/go"
GOPATH: onde seus arquivos de trabalho, seu workspace, fica localizado
GOPATH="/home/ellen/go"
export GOPATH=$HOME/go (.bashrc)
Package management? go get.
Na prática → e.g. gouuid

LINK DA AULA ACIMA : https://youtu.be/geLSoE5D0xA?list=PLCKpcjBB_VlBsxJ9IseNxFllf-UFEXOdg


//////////////////////////////////////////////////////////////////////////////////////////////////////////////

 Ambiente de Desenvolvimento – 3. IDEs

 Integrated development environment. WP: "[...] é um programa de computador que reúne características e ferramentas de apoio ao desenvolvimento de software com o objetivo de agilizar este processo."
IDEs:
Visual Studio Code → https://code.visualstudio.com/
go get -v github.com/nsf/gocode
Goland → https://www.jetbrains.com/go/ ($?)
Atom → https://atom.io/
Sublime → https://www.sublimetext.com/ ($)
Fontes:
https://github.com/tonsky/FiraCode
  
https://www.fsd.it/shop/fonts/pragmat... ($)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Ambiente de Desenvolvimento – 4. Comandos Go

go version
go env
go help
go fmt
./…
go run
go run [file name]
go run *.go
go build
para um executável:
gera o arquivo binário
informa caso tenham havido erros
caso não hajam erros, cria um executável e salva-o no diretório atual
para um pacote:
gera o arquivo
informa caso tenham havido erros
descarta o executável
go install
para um executável:
faz o build
nomeia o arquivo com o nome do diretório atual
salva o arquivo binário em $GOPATH/bin
para um pacote:
faz o build
salva o arquivo binário em $GOPATH/pkg
cria archive files (arquivo.a), os arquivos pré-compilados utilizados pelos imports
flags
"-race"

///////////////////////////////////////////////////////////////////////////////////////////////////

Ambiente de Desenvolvimento – 5. Repositórios no GitHub

Git foi feito pelo Linus Torvalds. O cara que criou o Linux.
GitHub, GitLab.
Como funciona?
Vá em github.com e crie um repo
Crie uma pasta com o mesmo nome no seu $GOPATH
$GOPATH/src/github.com/[username]/[repo]
Rode “git init” nesta pasta
Adicione arquivos, e.g. README.md e .gitignore
git add -A
git commit -m “here’s some commit message”
git remote add origin git@github.com:username/repo.git
git push -u origin master
Comandos:
git status
git add --all
git commit -m "mensagem"
git push

/////////////////////////////////////////////////////////////////////////////////////////

 Ambiente de Desenvolvimento – 6. Explorando o GitHub

 Clonando um repo
    git clone [repo]
SSH
Mac/Linux: ssh-keygen -t rsa
id_rsa: Esta é sua chave privada, que fica no diretório ~/.ssh, e serve para verificar sua chave pública.
id_rsa.pub: Esta é sua chave pública, que você pode compartilhar.
Windows: Google :)
git remote
git remote get-url origin
git remote blablabla ← help
Truque sujo: apaga tudo e clona denovo. (Não recomendo se o repo tiver 4 GB...)

/////////////////////////////////////////////////////////////////////////////////////

Ambiente de Desenvolvimento – 7. Compilação cruzada

GOOS // sistema operacional
GOARCH // arquitetura do porcessador
`GOOS=darwin GOARCH=amd64 go build test.go`
https://godoc.org/runtime#pkg-constants
git push
git clone
go get
Arquivos: https://github.com/ellenkorbes/aprend...

Mais detalhado:

A compilação cruzada em Golang é um processo que permite compilar um programa Go para uma plataforma diferente daquela em que você está desenvolvendo.
 Isso é especialmente útil para criar software que pode ser executado em diferentes sistemas operacionais sem precisar de um compilador Go instalado em cada um deles.

Como Funciona
A partir da versão 1.5 do Go, a compilação cruzada tornou-se muito mais simples.
 Você pode especificar o sistema operacional e a arquitetura alvo usando as variáveis de ambiente GOOS e GOARCH
  antes de compilar seu programa. Por exemplo:

Para compilar um programa para Windows a partir de um sistema Linux ou macOS:

bash
GOOS=windows GOARCH=amd64 go build -o hello.exe hello.go

Para compilar para Linux a partir de Windows:

bash
set GOOS=linux
set GOARCH=amd64
go build -o hello hello.go

Para compilar para macOS a partir de Linux ou Windows:

bash
GOOS=darwin GOARCH=amd64 go build -o hello

Verificando Plataformas Suportadas
Você pode verificar todas as combinações de GOOS e GOARCH suportadas pelo seu Go instalado usando o comando:

bash
go tool dist list

Isso fornecerá uma lista de todas as plataformas que sua versão do Go pode alvo.
Compilação Cruzada com CGO
Se seu projeto usa CGO (o mecanismo de interoperabilidade entre Go e C), as coisas podem ficar um pouco mais complicadas.
 CGO requer um compilador C, e compilar C para uma plataforma cruzada não é trivial. Você pode precisar instalar um compilador
  C cruzado, como gcc ou clang, e configurar variáveis de ambiente adicionais como CC e CGO_ENABLED=1. Por exemplo:

bash
CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc GOOS=windows GOARCH=amd64 go build -o hello.exe hello.go

Ferramentas de Compilação Cruzada
Existem ferramentas que podem facilitar a compilação cruzada, como o gox. 
O gox é uma ferramenta simples para compilação cruzada em Go que se comporta muito como o go build padrão,
 mas permite compilar para várias plataformas de forma paralela. Por exemplo:

bash
gox -osarch="linux/amd64" -osarch="windows/amd64" -osarch="darwin/amd64"


Conclusão
A compilação cruzada em Go é uma funcionalidade poderosa que permite aos desenvolvedores criar binários para várias plataformas
 a partir de uma única máquina de desenvolvimento. Isso facilita a distribuição de ferramentas e aplicativos
  para diferentes sistemas operacionais, tornando o desenvolvimento mais eficiente e versátil.

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////

   Ambiente de Desenvolvimento – 8. Pacotes

   Opção 1: uma pasta, vários arquivos.
package declaration em todos os arquivos
package scope: um elemento de um arquivo é acessível de todos os arquivos
imports tem file scope
Opção 2: separando por packages.
pastas diferentes
requer imports
para usar: package.Função()
Exportado vs. não-exportado, ou seja, visível vs. não-visível
Em Go não utilizamos os termos "público" e "privado" como em outras linguagens
É somente questão de capitalização
Com maiúscula: exportado, visível fora do package
Com minúscula: não exportado, não utilizável fora do package
Artigo: https://rakyll.org/style-packages/
Exemplo: https://github.com/ellenkorbes/aprend...

//////////////////////////////////////////////////////////////
